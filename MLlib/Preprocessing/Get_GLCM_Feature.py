from math import *

'''
grayMatrix is Gray scale co-occurence matrix from malware sample
count is the sum of the bumber which is not zero in grayMatrix
'''

'''
Homogeneity
grayMatrix(matrix)
graywidth(int)
grayheight(int)
res(float)
'''
def GLCM_HOM(grayMatrix,m_count,grayLevel=255):
    res=0.0
    for i in range(0,grayLevel):
        for j in range(0,grayLevel):
            if grayMatrix[i][j]!=0:
                Pij=grayMatrix[i][j]*1.0/m_count
                res+=Pij*1.0/(1+(i-j)*(i-j))
    return res

'''
contrast

'''
def GLCM_CON(grayMatrix,m_count,grayLevel=255):
    res=0.0
    for i in range(0,grayLevel):
        for j in range(0,grayLevel):
            if grayMatrix[i][j]!=0:
                Pij=grayMatrix[i][j]*1.0/m_count
                res+=Pij*1.0*(pow((i-j),2))
    return res

'''
Dissimilarity
'''
def GLCM_DIS(grayMatrix,m_count,grayLevel=255):
    res=0.0
    for i in range(0,grayLevel):
        for j in range(0,grayLevel):
            if grayMatrix[i][j]!=0:
                Pij=grayMatrix[i][j]*1.0/m_count
                res+=Pij*1.0*abs(i-j)
    return res

'''
GLCM Mean
'''
def GLCM_MEAN(grayMatrix,m_count,grayLevel=255):
    U=0.0
    for i in range(0,grayLevel):
        for j in range(0,grayLevel):
            if grayMatrix[i][j]!=0:
                Pij=grayMatrix[i][j]*1.0/m_count
                U+=i*1.0*Pij
    return U

'''
Variance
'''
def GLCM_VAR(grayMatrix,m_count,grayLevel=255):
    U=0.0
    for i in range(0,grayLevel):
        for j in range(0,grayLevel):
            if grayMatrix[i][j]!=0:
                Pij=grayMatrix[i][j]*1.0/m_count
                U+=i*1.0*Pij
    iVar=0.0
    for i in range(0,grayLevel):
        for j in range(0,grayLevel):
            if grayMatrix[i][j]!=0:
                Pij=grayMatrix[i][j]*1.0/m_count
                iVar+=Pij*1.0*(pow((i-U),2))
    return iVar

'''
GLCM ASM
'''
def GLCM_ASM(grayMatrix,m_count,grayLevel=255):
    res=0.0
    for i in range(0,grayLevel):
        for j in range(0,grayLevel):
            if grayMatrix[i][j]!=0:
                Pij=grayMatrix[i][j]*1.0/m_count
                res+=Pij*1.0*Pij
    return res

'''
GLCM Correlation
'''
def GLCM_COR(grayMatrix,m_count,grayLevel=255):
    iU=0.0
    jU=0.0
    iVar=0.0
    jVar=0.0
    res=0.0
    for i in range(0,grayLevel):
        for j in range(0,grayLevel):
            if grayMatrix[i][j]!=0:
                Pij=grayMatrix[i][j]*1.0/m_count
                iU+=i*1.0*Pij
                jU+=j*1.0*Pij
    for i in range(0,grayLevel):
        for j in range(0,grayLevel):
            if grayMatrix[i][j]!=0:
                Pij=grayMatrix[i][j]*1.0/m_count
                iVar+=Pij*(pow((i-iU),2))
                jVar+=Pij*(pow((j-jU),2))
    for i in range(0,grayLevel):
        for j in range(0,grayLevel):
            if grayMatrix[i][j]!=0:
                Pij=grayMatrix[i][j]*1.0/m_count
                res+=(Pij*(i-iU)*(j-jU))/sqrt(iVar*jVar)
    return res

'''
GLDV ASM
'''
def GLVD_ASM(grayMatrix,m_count,grayLevel=255):
    res=0.0
    for k in range(0,grayLevel):
        for i in range(0,grayLevel):
            for j in range(0,grayLevel):
                if grayMatrix[i][j]!=0 and abs(i-j)==k:
                    Pij=grayMatrix[i][j]*1.0/m_count
                    res+=pow(Pij,2)
    return res

'''
entropy
'''
def GLCM_ENT(grayMatrix,m_count,grayLevel=255):
    res=0.0
    for i in range(0,grayLevel):
        for j in range(0,grayLevel):
            if grayMatrix[i][j]!=0:
                Pij=grayMatrix[i][j]*1.0/m_count
                res+=Pij*(-log(Pij))
    return res

'''
GLVD Mean
'''
def GLVD_MEAN(grayMatrix,m_count,grayLevel=255):
    res=0.0
    for k in range(0,grayLevel):
        for i in range(0,grayLevel):
            for j in range(0,grayLevel):
                if grayMatrix[i][j]!=0 and abs(i-j)==k:
                    Pij=grayMatrix[i][j]*1.0/m_count
                    res+=Pij*k
    return res

'''
GLVD Contrast
'''
def GLVD_CON(grayMatrix,m_count,grayLevel=255):
    res=0.0
    for k in range(0,grayLevel):
        for i in range(0,grayLevel):
            for j in range(0,grayLevel):
                if grayMatrix[i][j]!=0 and abs(i-j)==k:
                    Pij=grayMatrix[i][j]*1.0/m_count
                    res+=Pij*k*k
    return res



